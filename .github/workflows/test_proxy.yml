name: Test proxy

on: workflow_call

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Nginx config
        run: |
          cat > proxy.conf << 'NGINX'
            error_log /dev/stderr info;
            access_log /dev/stdout;

            server {
                listen 0.0.0.0:8080;
                server_name _;

                proxy_headers_hash_max_size 8192;
                proxy_buffer_size 128k;
                proxy_buffers 4 256k;
                proxy_busy_buffers_size 256k;

                location ^~ /repo/extras/github_api/ {
                    proxy_pass https://github.com/;
                    proxy_set_header Host github.com;
                    proxy_ssl_name github.com;
                    proxy_ssl_server_name on;
                }
                location ^~ /repo/sourceforge/ {
                    proxy_pass https://sourceforge.net/;
                    proxy_set_header Host sourceforge.net;
                    proxy_ssl_name sourceforge.net;
                    proxy_ssl_server_name on;
                }
                location ^~ /repo/extras/microsoft/ {
                    proxy_pass https://download.microsoft.com/;
                    proxy_set_header Host download.microsoft.com;
                    proxy_ssl_name download.microsoft.com;
                    proxy_ssl_server_name on;
                }
                location ^~ /repo/conan_sourceware/ { 
                    proxy_pass https://sourceware.org/;
                    proxy_set_header Host sourceware.org;
                    proxy_ssl_name sourceware.org;
                    proxy_ssl_server_name on;
                }
                location ^~ /repo/nuget_org/ {
                    proxy_pass https://www.nuget.org/;
                    proxy_set_header Host www.nuget.org;
                    proxy_ssl_name www.nuget.org;
                    proxy_ssl_server_name on;
                }
                location ^~ /repo/google_dl/ {
                    proxy_pass https://dl.google.com/;
                    proxy_set_header Host dl.google.com;
                    proxy_ssl_name dl.google.com;
                    proxy_ssl_server_name on;
                }
                location ^~ /repo/go/google_storage/ {
                    proxy_pass https://storage.googleapis.com/;
                    proxy_set_header Host storage.googleapis.com;
                    proxy_ssl_name storage.googleapis.com;
                    proxy_ssl_server_name on;
                }
            }
          NGINX

      - name: Run Nginx in Docker
        run: |
          docker run -d --name proxy \
            -p 127.0.0.1:8080:8080 \
            -v "$PWD/proxy.conf":/etc/nginx/conf.d/default.conf:ro \
            nginx:alpine
          # не работает без следующей команды
          docker exec -t proxy sh -lc 'apk add --no-cache curl bind-tools > /dev/null && \
          getent hosts github.com && \
          getent hosts objects.githubusercontent.com && \
          curl -I https://github.com'

      - name: Check vcpkg in classic mode
        run: |
            ./bootstrap-vcpkg.sh --disableMetrics
            # vcpkg install --only-downloads nlohmann-json zlib mip-protection-sdk avro-cpp minio-cpp
            # vcpkg install argparse
        env:
            VCPKG_PROXY: http://127.0.0.1:8080
            VCPKG_DISABLE_METRICS: 1

      - name: Check vcpkg in manifest mode
        run: |
          cat > vcpkg.json << 'JSON'
            {
                "dependencies": [
                    "nlohmann-json",
                    "argparse",
                    "mip-protection-sdk"
                ]
            }
          JSON
          cat > main.cpp << 'MAIN'
          #include <iostream>
          #include <argparse/argparse.hpp>
          int main() {
             auto p = argparse::ArgumentParser("test");
             auto s = p.get_program_name();
             std::cout << s << "test\n";
          }
          MAIN
          cat > CMakeLists.txt << 'CMakeLists'
          cmake_minimum_required(VERSION 3.15)
          project(test LANGUAGES CXX)
          add_executable(test main.cpp)
          find_package(nlohmann_json REQUIRED)
          find_package(argparse REQUIRED)
          target_link_libraries(test PRIVATE argparse::argparse nlohmann_json::nlohmann_json)
          CMakeLists

          cmake -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake -S . -B build
          cmake --build build
          ./vcpkg x-add-version boost-cmake --overwrite-version --vcpkg-root=.
          ./vcpkg x-add-version openssl --overwrite-version --vcpkg-root=.
          ./vcpkg x-add-version argparse --overwrite-version --vcpkg-root=.
          ./vcpkg x-add-version --all --vcpkg-root=.
          rm proxy.conf
        env:
            VCPKG_PROXY: http://127.0.0.1:8080
            VCPKG_DISABLE_METRICS: 1
            VCPKG_ROOT: .